{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","responseType","useStyles","makeStyles","root","minHeight","display","flexDirection","justifyContent","alignItems","header","textAlign","button","margin","App","classes","useState","folioId","setfolioId","setRequest","sendRequest","a","console","log","xmlBody","config","headers","post","res","data","alert","Container","maxWidth","Box","Card","className","CardHeader","title","subheader","CardActions","TextField","id","label","autoFocus","required","InputLabelProps","shrink","value","variant","onChange","e","target","trim","test","length","slice","handleKey","Button","color","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sVAcMA,E,OAAMC,EAAMC,OAAO,CACrBC,QAAS,+CACTC,aAAc,SAGZC,EAAYC,YAAW,CACzBC,KAAM,CACFC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEhBC,OAAQ,CACJC,UAAW,UAEfC,OAAQ,CACJC,OAAQ,MA6EDC,MAzEf,WACI,IAAMC,EAAUb,IADL,EAGmBc,mBAAS,YAH5B,mBAGJC,EAHI,KAGKC,EAHL,OAImBF,mBAAS,KAJ5B,mBAIKG,GAJL,WAMLC,EAAW,uCAAG,gCAAAC,EAAA,6DAClBC,QAAQC,IAAI,WAAYN,GAClBO,EAFY,iJAIQP,EAJR,uDAMZQ,EAAS,CACTC,QAAS,CAAE,eAAgB,aAPf,SASA7B,EAAI8B,KAAK9B,EAAIG,QAASwB,EAASC,GAT/B,OASZG,EATY,OAUhBT,EAAWS,EAAIC,MACfP,QAAQC,IAAI,YAAaK,EAAIC,MAC7BC,MAAM,gCAAD,OAAiCb,EAAjC,aAA6CW,EAAIC,OAZtC,2CAAH,qDA8BjB,OACI,kBAACE,EAAA,EAAD,CAAWC,SAAS,MAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAWpB,EAAQX,MACrB,kBAACgC,EAAA,EAAD,CACID,UAAWpB,EAAQL,OACnB2B,MAAM,6BACNC,UAAU,+BAEd,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,GAAG,kBACHC,MAAM,4BACNC,WAAW,EACXC,UAAU,EACVC,gBAAiB,CACbC,QAAQ,GAEZC,MAAO9B,EACP+B,QAAQ,WACRC,SAAU,SAACC,GAAD,OAnChB,SAACA,GACf,IAAIH,EAAQG,EAAEC,OAAOJ,MAAMK,OACd,YACFC,KAAKN,IACRA,EAAMO,OAAS,IACfP,EAAQ,WAAaA,GAErBA,EAAMO,OAAS,IACfP,EAAQA,EAAMQ,OAAO,KAEtBR,EAAQ,WACf7B,EAAW6B,GACXzB,QAAQC,IAAIN,GAuByBuC,CAAUN,OAGnC,kBAACO,EAAA,EAAD,CACItB,UAAWpB,EAAQH,OACnBoC,QAAQ,YACRU,MAAM,UACNC,QAASvC,GAJb,mBClFAwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.a19f223a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    Container,\n    Box,\n    Button,\n    Card,\n    CardHeader,\n    CardActions,\n    TextField,\n    makeStyles,\n} from \"@material-ui/core\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://api.aspenclubsoftware.com/webole.asp\",\n    responseType: \"text\",\n});\n\nconst useStyles = makeStyles({\n    root: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    header: {\n        textAlign: \"center\",\n    },\n    button: {\n        margin: 20,\n    },\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    const [folioId, setfolioId] = useState(\"00000001\");\n    const [Request, setRequest] = useState(\"x\");\n\n    const sendRequest = async () => {\n      console.log('folioId ', folioId)\n        let xmlBody = `<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n                      <RequestMessage ElementType=\"FolioInv\"> \n                      <Folino>${folioId}</Folino> \n                      </RequestMessage>`;\n        let config = {\n            headers: { \"Content-Type\": \"text/xml\" },\n        };\n        let res = await api.post(api.baseURL, xmlBody, config);\n        setRequest(res.data);\n        console.log('Request: ', res.data);\n        alert(`xmlRequest for this FolioId: ${folioId}\\n${res.data}`)\n    };\n\n    const handleKey = (e) => {\n        let value = e.target.value.trim();\n        let regexp = /^[0-9]*$/g;\n        if (regexp.test(value)) {\n            if (value.length < 9) {\n                value = \"00000000\" + value;\n            }\n            if (value.length > 8) {\n                value = value.slice(-8);\n            }\n        } else value = \"00000000\";\n        setfolioId(value);\n        console.log(folioId);\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Box>\n                <Card className={classes.root}>\n                    <CardHeader\n                        className={classes.header}\n                        title=\"You can get Folio PDF here\"\n                        subheader=\"Just input 8-digits number\"\n                    />\n                    <CardActions>\n                        <TextField\n                            id=\"outlined-number\"\n                            label=\"8-digit number (required)\"\n                            autoFocus={true}\n                            required={true}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            value={folioId}\n                            variant=\"outlined\"\n                            onChange={(e) => handleKey(e)}\n                        />\n                    </CardActions>\n                    <Button\n                        className={classes.button}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={sendRequest}\n                    >\n                        Request PDF\n                    </Button>\n                </Card>\n            </Box>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}